package upload

import (
	"fmt"
	"io/ioutil"
	"mime/multipart"
	"net/http"
	"os"
	"strings"
)

type service struct {
	repo Repository
	Mode string
}

// NewService creates new auth service
func NewService(member Repository, Mode string) (Service, error) {
	s := service{member, Mode}
	return &s, nil
}

type Service interface {
	UploadImageService(image multipart.File, Type string) (interface{}, error)
}

func CheckTypeImage(Type string) (string, error) {
	switch Type {
	case "image/jpeg", "image/jpg":
		return "jpg", nil
	case "image/gif":
		return "gif", nil
	case "image/png":
		return "png", nil
	case "application/pdf": // not image, but application !
		return "pdf", nil
	default:
		return "png", nil
	}
}

func (s *service) UploadImageService(image multipart.File, Type string) (interface{}, error) {

	buff := make([]byte, 512) // docs tell that it take only first 512 bytes into consideration
	if _, err := image.Read(buff); err != nil {
		fmt.Println(err) // do something with that error
	}
	filetype := http.DetectContentType(buff)
	typeImage, _ := CheckTypeImage(filetype)
	fmt.Println(http.DetectContentType(buff))
	_, err := createDirectory(Type, s.Mode)
	if err != nil {
		return nil, err
	}
	// fileHeader := make([]byte, 512)
	// if _, err := image.Read(fileHeader); err != nil {
	// 	return nil, err
	// }
	resp, err := s.UploadProduct(image, Type, typeImage)
	if err != nil {
		return nil, err
	}
	return resp, nil
	// switch Type {
	// case "1":
	// 	fileHeader := make([]byte, 512)
	// 	if _, err := image.Read(fileHeader); err != nil {
	// 		return nil, err
	// 	}
	// 	resp, err := s.UploadProduct(image, Type)
	// 	if err != nil {
	// 		return nil, err
	// 	}
	// 	return resp, nil
	// case "2":

	// }
	// return nil, nil
}

func createDirectory(dirName string, mode string) (bool, error) {
	if mode == "Production" {
		src, err := os.Stat("/app/image/" + dirName)

		if os.IsNotExist(err) {
			errDir := os.MkdirAll("/app/image/"+dirName, 0755)
			if errDir != nil {
				panic(err)
			}
			return true, nil
		}

		if src.Mode().IsRegular() {
			fmt.Println(dirName, "already exist as a file!")
			return false, nil
		}

		return false, nil
	} else {
		src, err := os.Stat("/app/image-demo/" + dirName)

		if os.IsNotExist(err) {
			errDir := os.MkdirAll("/app/image-demo/"+dirName, 0755)
			if errDir != nil {
				panic(err)
			}
			return true, nil
		}

		if src.Mode().IsRegular() {
			fmt.Println(dirName, "already exist as a file!")
			return false, nil
		}

		return false, nil
	}
}

func (s *service) UploadProduct(image multipart.File, Type string, TypeImg string) (interface{}, error) {
	if s.Mode == "Production" {
		tempFile, err := ioutil.TempFile(`/app/image/`+Type+`/`, Type+"-*.png")
		if err != nil {
			fmt.Println(err)
			return nil, err
		}
		defer tempFile.Close()

		file, err := ioutil.ReadAll(image)
		if err != nil {
			fmt.Println(err)
		}
		tempFile.Write(file)

		var imagename string = ""

		filename := strings.Replace(tempFile.Name(), `\`, `/`, -1)
		files := strings.Split(filename, "/")
		for i, in := range files {
			if i > 1 {
				imagename += "/" + in
			}
		}
		URL := "https://api.pct2003.com"
		fmt.Println(filename, files)
		prodcut := UploadModel{
			Url:  URL + imagename,
			Type: Type,
		}
		return prodcut, nil
	} else {
		tempFile, err := ioutil.TempFile(`/app/image-demo/`+Type+`/`, Type+"-*.png")
		if err != nil {
			fmt.Println(err)
			return nil, err
		}
		defer tempFile.Close()

		file, err := ioutil.ReadAll(image)
		if err != nil {
			fmt.Println(err)
		}
		tempFile.Write(file)
		var imagename string = ""
		filename := strings.Replace(tempFile.Name(), `\`, `/`, -1)
		files := strings.Split(filename, "/")
		for i, in := range files {
			if i > 1 {
				imagename += "/" + in
			}
		}
		URL := "https://api-dev.pct2003.com"
		fmt.Println(filename, files)
		prodcut := UploadModel{
			Url:  URL + imagename,
			Type: Type,
		}
		return prodcut, nil
	}
}
